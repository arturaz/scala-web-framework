package build.framework

// // https://github.com/joan38/mill-scalafix
// import $ivy.`com.goyeau::mill-scalafix::0.3.2`
// import com.goyeau.mill.scalafix.ScalafixModule

import coursier.ivy.IvyRepository
import coursier.maven.MavenRepository
import mill._
import mill.api.Logger
import mill.scalajslib.api.{ModuleKind, ModuleSplitStyle, Report}
import mill.scalalib.scalafmt.ScalafmtModule
import os.{Path, RelPath}

import java.nio.file.Files

import scalalib._
import scalajslib._

/** Run `mill mill.scalalib.Dependency/showUpdates` to check for new versions. */
object Versions {

  /** [[https://scala-lang.org]].
    *
    * See the newest versions in https://github.com/scala/scala3/releases.
    */
  final val Scala = "3.6.3"

  /** Look up the version compatible with [[Scala]] version in https://mvnrepository.com/artifact/com.lihaoyi/ammonite.
    */
  final val Ammonite = "3.0.0-2-6342755f"

  /** [[https://scala-js.org]] */
  final val ScalaJS = "1.18.2"

  final val Cats = "2.12.0"
  final val MUnit = "1.0.0"
  final val Tapir = "1.10.12"
  final val Http4s = "0.23.27"
  final val Scribe = "3.15.0"
  final val Doobie = "1.0.0-RC5"
  final val Chimney = "1.2.0"
  final val Circe = "0.14.9"
  final val Monocle = "3.2.0"
  final val Ciris = "3.7.0"
  // Build with fixes for:
  // https://github.com/profunktor/redis4cats/pull/952
  // https://github.com/profunktor/redis4cats/pull/963
  final val Redis4Cats = "1.7.0-20-77770cc-SNAPSHOT"

  final val Squants = "1.8.3"

  final val OpenTelemetryJava = "1.46.0"
  final val OpenTelemetryJavaIncubator = OpenTelemetryJava + "-alpha"
  final val Otel4s = "0.12.0-RC2"
  final val Otel4sHttp4s = "0.11.0-rc.1"
  final val Otel4sRedis4Cats = "0.1-a6fe9af-20250131T145230Z-SNAPSHOT"
}

object Libraries {
  // The Scala API for Quantities, Units of Measure and Dimensional Analysis
  // https://github.com/typelevel/squants
  // https://mvnrepository.com/artifact/org.typelevel/squants
  val squants = ivy"org.typelevel::squants::${Versions.Squants}"
}

/** Barebones Scala build. */
trait BaseScalaModule extends ScalaModule {
  override def scalaVersion = Versions.Scala

  override def ammoniteVersion = Versions.Ammonite
}

/** Barebones Scala.js build. */
trait BaseScalaJSModule extends BaseScalaModule with ScalaJSModule {
  // https://www.scala-js.org/
  override def scalaJSVersion = Versions.ScalaJS

  /** Emit ES-type modules */
  override def moduleKind = ModuleKind.ESModule

  /** Split the JS output into lots of small files so that Vite could reload them quickly.
    *   - small modules for our code
    *   - large modules for external dependencies and standard library
    */
  override def moduleSplitStyle = ModuleSplitStyle.SmallModulesFor(List("app"))
}

def ivyRepositoryFromUrl(url: String) = {
  IvyRepository.parse(
    s"$url/[organization]/[module](_[scalaVersion])/[revision]/[type]s/[artifact](-[classifier]).[ext]"
  ) match {
    case Left(value)  => throw new Exception(value)
    case Right(value) => value
  }
}

/** Scala module for our own non-generated code. */
trait FrameworkScalaModule extends BaseScalaModule with ScalafmtModule /*  with ScalafixModule */ {
  override def scalacOptions = T {
    Seq(
      // Show deprecation warnings
      "-deprecation",
      // Show feature warnings,
      "-feature",
      // Warn if a non-unit value is being discarded implicitly
      "-Wvalue-discard",
      // https://github.com/scala/scala3/pull/18093
      "-Wimplausible-patterns",
      // Treat warnings as errors
      "-Werror",
      // Allow implicit conversions
      "-language:implicitConversions",
      // Allow higher-kinded types
      "-language:higherKinds",
      // Enable strict equality: https://docs.scala-lang.org/scala3/reference/contextual/multiversal-equality.html
      "-language:strictEquality",
      // Increase the number of allowed inlines, we have case classes with loads of fields.
      "-Xmax-inlines:128",
      // Disable significant indentation, it's evil and error-prone.
      "-no-indent",
      // https://www.scala-lang.org/2024/08/19/given-priority-change-3.7.html
      "-source",
      "3.7",
      // From https://github.com/iRevive/union-derivation?tab=readme-ov-file#getting-started:
      // important for the detection of an abstract method in a trait
      "-Yretain-trees", 
      // "-experimental"
    )
  }

  override def repositoriesTask = T.task {
    super.repositoriesTask() ++ Seq(
      ivyRepositoryFromUrl("https://arturaz.github.io/packages/ivy2"),
      MavenRepository("https://arturaz.github.io/packages/maven/repository"),
    )
  }
}

/** ScalaJS module for our own non-generated code. */
trait FrameworkScalaJSModule extends FrameworkScalaModule with BaseScalaJSModule

/** ScalaJS module for the web client which uses Vite. */
trait FrameworkScalaJSViteModule extends FrameworkScalaJSModule {
  /** The name of the web client directory relative to the workspace root. */
  def clientDirName: String

  override def fastLinkJS = T {
    copyGeneratedJS(super.fastLinkJS(), T.workspace, T.log, cleanBeforeCopy = false)
  }

  override def fullLinkJS = T {
    copyGeneratedJS(super.fullLinkJS(), T.workspace, T.log, cleanBeforeCopy = true)
  }

  private def copyGeneratedJS(
    report: Report,
    workspace: Path,
    log: Logger,
    cleanBeforeCopy: Boolean
  ): Report = {
    val src = report.dest.path
    val dstDir = workspace / clientDirName / "vite" / "scala_output"

    if (cleanBeforeCopy) {
      log.info(s"Cleaning '$dstDir'")
      os.remove.all(dstDir)
      os.makeDir(dstDir)
    }

    copyBySwap(src, dstDir, log)

    report
  }
}

/** A module shared between JVM and JS. */
trait FrameworkPlatformModule extends FrameworkScalaModule with PlatformScalaModule

val ScalaDefaultImports: Vector[String] = Vector(
  "java.lang",
  "scala",
  "scala.Predef",
)

val FrameworkPreludeImports: Vector[String] = Vector(
  "framework.exts",
  "framework.prelude",
)

def makePreludeImportsCompilerOption(imports: Vector[String]): String =
  s"-Yimports:${imports.mkString(",")}"

trait FrameworkTestModule extends FrameworkScalaModule with TestModule.Munit {
  override def ivyDeps = Agg(
    // Testing framework
    // https://scalameta.org/munit/
    // https://mvnrepository.com/artifact/org.scalameta/munit
    ivy"org.scalameta::munit::${Versions.MUnit}",

    // MUnit support for Cats Effect
    // https://github.com/typelevel/munit-cats-effect
    // https://mvnrepository.com/artifact/org.typelevel/munit-cats-effect
    ivy"org.typelevel::munit-cats-effect::2.0.0",

    // MUnit support for ScalaCheck
    // https://scalameta.org/munit/docs/integrations/scalacheck.html
    // https://mvnrepository.com/artifact/org.scalameta/munit-scalacheck
    ivy"org.scalameta::munit-scalacheck::${Versions.MUnit}",
  )
}

/** Module for tests that use Scala.js. */
trait FrameworkScalaJSTestModule extends FrameworkTestModule with FrameworkScalaJSModule with TestScalaJSModule

/** Copies all existing and new files from [[src]] to [[dst]] by exchanging the directories with a `move`. */
def copyBySwap(
  src: Path,
  dst: Path,
  log: Logger,
): Unit = {
  log.info(s"Copying '$src' to '$dst'")

  if (os.exists(dst)) {
    val dstNew = Path(s"$dst.new")
    val dstOld = Path(s"$dst.old")

    // Copy the files to the new directory
    os.remove.all(dstNew)
    os.copy(src, dstNew, replaceExisting = true, createFolders = true)

    // Try to do an semi-atomic swap
    os.remove.all(dstOld)
    os.move(dst, dstOld)
    os.move(dstNew, dst)

    // Remove the old path
    os.remove.all(dstOld)
  } else {
    os.copy(src, dst, replaceExisting = true, createFolders = true)
  }
}

/** Copies all existing and new files from [[src]] to [[dst]], removes files from [[dst]] which do not exist in [[src]]
  * anymore.
  */
def syncDirectories(
  src: Path,
  dst: Path,
  log: Logger,
  removeOldFiles: Boolean = true,
): Unit = {
  val srcFiles = os.walk(src).iterator.map(_.relativeTo(src)).toVector
  if (!Files.exists(dst.toNIO)) os.makeDir.all(dst)
  val dstFiles = os.walk(dst).iterator.map(_.relativeTo(dst)).toVector

  val newFiles = srcFiles diff dstFiles
  val removedFiles = dstFiles diff srcFiles
  val keptFiles = dstFiles intersect srcFiles

  log.info(s"Syncing directories: $src -> $dst")
  log.info(s"  New files: ${newFiles.size}")
  if (log.debugEnabled) log.debug(s"  New files:\n    ${newFiles.mkString(",\n    ")}")
  log.info(s"  Kept files: ${keptFiles.size}")
  if (log.debugEnabled) log.debug(s"  Kept files:\n    ${keptFiles.mkString(",\n    ")}")
  if (removeOldFiles) {
    log.info(s"  Removed files: ${removedFiles.size}")
    if (log.debugEnabled) log.debug(s"  Removed files:\n    ${removedFiles.mkString(",\n    ")}")
  }

  val toCopy = newFiles ++ keptFiles
  toCopy.foreach { file =>
    os.copy(src / file, dst / file, replaceExisting = true, createFolders = true)
  }

  if (removeOldFiles) {
    val toRemove = removedFiles
    // Remove from the longest path to the shortest
    toRemove.reverseIterator.foreach { file =>
      os.remove.all(dst / file)
    }
  }
}

object OpenTelemetry {
  /** Environment variables for development with Grafana LGTM OpenTelemetry stack. */
  def environmentVariablesForDevelopment(serviceName: String): Map[String, String] = Map(
    // https://opentelemetry.io/docs/languages/java/configuration/#environment-variables-and-system-properties
    "OTEL_JAVA_GLOBAL_AUTOCONFIGURE_ENABLED" -> "true",
    "OTEL_SERVICE_NAME" -> serviceName,
  )
}